/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: FormValidator, FormValidatorStepsHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime/runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _src_FormValidator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/FormValidator */ \"./src/FormValidator.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FormValidator\", function() { return _src_FormValidator__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _src_FormValidatorStepsHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/FormValidatorStepsHandler */ \"./src/FormValidatorStepsHandler.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FormValidatorStepsHandler\", function() { return _src_FormValidatorStepsHandler__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n\n\n\nwindow.FormValidator = _src_FormValidator__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\nwindow.FormValidatorStepsHandler = _src_FormValidatorStepsHandler__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/deep-spread/index.js":
/*!*******************************************!*\
  !*** ./node_modules/deep-spread/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const isObject = obj => typeof obj === 'object' && !Array.isArray(obj);\r\nconst escapeChar = s => s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n/**\r\n * Merges recursively 2 objects prioritizing the injector values in case of overlapping\r\n * @param {object} Injected - The object to be injected\r\n * @param {object} Injector - The object that injects 'injected'\r\n * @returns {object} The deep-spreaded object\r\n */\r\nconst deepSpread = (Injector, Injected) => {\r\n  const injected = { ...Injected };\r\n  if ([null, undefined].includes(injected)) return Injector;\r\n  const inejctorKeys = Object.keys(Injector);\r\n  for (let k = 0; k < inejctorKeys.length; k += 1) {\r\n    const key = inejctorKeys[k];\r\n    if (isObject(Injector[key]) && isObject(injected[key])) {\r\n      injected[key] = deepSpread(Injector[key], injected[key]);\r\n    } else {\r\n      injected[key] = Injector[key];\r\n    }\r\n  }\r\n  return injected;\r\n};\r\n\r\n/**\r\n * Merges recursively 2 objects prioritizing the injector values in case of overlapping\r\n * @typedef {Function} DeepSpread\r\n * @param {object} Injected - The object to be injected\r\n */\r\n/**\r\n * Merges recursively 2 objects prioritizing the injector values in case of overlapping\r\n * @typedef {object} InjectTo\r\n * @property {DeepSpread} to - Indicates the object to be injected\r\n */\r\n/**\r\n * Merges recursively 2 objects prioritizing the injector values in case of overlapping\r\n * @param {object} Injector - The object that injects 'injected'\r\n * @returns {InjectTo} Object with function 'to'\r\n */\r\nconst inject = Injector => {\r\n  /**\r\n   * Merges recursively 2 objects prioritizing the injector values in case of overlapping\r\n   * @param {object} Injected - The object to be injected\r\n   * @returns {object} The result of the deep spread\r\n   */\r\n  const to = Injected => deepSpread(Injector, Injected);\r\n  return { to };\r\n};\r\n\r\n/**\r\n * Merges recursively N objects prioritizing the injector values in case of overlapping\r\n * @param {object} Injector - The object that injects 'injected'\r\n * @returns {InjectTo} Object with function 'to'\r\n */\r\nconst injectN = Injector => {\r\n  /**\r\n   * Merges recursively N objects prioritizing the injector values in case of overlapping\r\n   * @param {object} Injected - The object to be injected\r\n   */\r\n  const to = (newInjector = Injector) => Injected => {\r\n    /**\r\n     * @type {object} The result of the deep spread\r\n     */\r\n    result = deepSpread(newInjector, Injected);\r\n    return { result, to: to(result) }\r\n  }\r\n  return { result: Injector, to: to() };\r\n};\r\n\r\nconst getValue = (obj, search) => {\r\n  search = search.split('.');\r\n  for (let k = 0; k < search.length; k += 1)\r\n    if ([null, undefined].includes(obj)) return undefined;\r\n    else obj = obj[search[k]]\r\n  return obj;\r\n};\r\n\r\nconst arrayOfN = n => {\r\n  const result = [];\r\n  for (let k = 0; k < n; k += 1) result.push(k);\r\n  return result;\r\n};\r\n\r\nconst getKeys = obj => Array.isArray(obj) ? arrayOfN(obj.length) : Object.keys(obj);\r\n\r\n/**\r\n * Deep replace of \"values\" in \"Objects\"\r\n * @param {object} values - Object where keys are searchs and values are values to replace\r\n * @param {string} borders - String of length 2 indicating the start and end of search\r\n * @param {number} borderRepeat - Number of border repeats\r\n */\r\nconst replace = (values = {}, borders = '{}', borderRepeat = 2) => ({\r\n  /**\r\n   * Replaces values en each object\r\n   * @param {object} Objects - Destination objects\r\n   * @returns {array}\r\n   */\r\n  in: (...Objects) => {\r\n    const b1 = escapeChar(borders[0] || '').repeat(borderRepeat);\r\n    const b2 = escapeChar(borders[1] || '').repeat(borderRepeat);\r\n    const result = [];\r\n    for (let k = 0; k < Objects.length; k += 1) {\r\n      const obj = Array.isArray(Objects[k]) ? [...Objects[k]] : { ...Objects[k] };\r\n      const keys = getKeys(obj);\r\n      for (let m = 0; m < keys.length; m += 1) {\r\n        const key = keys[m];\r\n        if (typeof obj[key] === 'object') [obj[key]] = replace(values, borders, borderRepeat).in(obj[key]);\r\n        else if (typeof obj[key] === 'string') {\r\n          obj[key] = obj[key].replace(new RegExp(`${b1}[^${b1}]*${b2}`, 'g'), match => {\r\n            const nestedKey = match.replace(new RegExp(`${b1} *| *${b2}`, 'g'), '');\r\n            return getValue(values, nestedKey);\r\n          });\r\n        }\r\n      }\r\n      result.push(obj);\r\n    }\r\n    return result;\r\n  }\r\n});\r\n\r\nmodule.exports = { deepSpread, inject, injectN, replace };\r\n\n\n//# sourceURL=webpack:///./node_modules/deep-spread/index.js?");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/regenerator-runtime/runtime.js?");

/***/ }),

/***/ "./node_modules/vanilla-masker/lib/vanilla-masker.js":
/*!***********************************************************!*\
  !*** ./node_modules/vanilla-masker/lib/vanilla-masker.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function() {\n  var DIGIT = \"9\",\n      ALPHA = \"A\",\n      ALPHANUM = \"S\",\n      BY_PASS_KEYS = [9, 16, 17, 18, 36, 37, 38, 39, 40, 91, 92, 93],\n      isAllowedKeyCode = function(keyCode) {\n        for (var i = 0, len = BY_PASS_KEYS.length; i < len; i++) {\n          if (keyCode == BY_PASS_KEYS[i]) {\n            return false;\n          }\n        }\n        return true;\n      },\n      mergeMoneyOptions = function(opts) {\n        opts = opts || {};\n        opts = {\n          delimiter: opts.delimiter || \".\",\n          lastOutput: opts.lastOutput,\n          precision: opts.hasOwnProperty(\"precision\") ? opts.precision : 2,\n          separator: opts.separator || \",\",\n          showSignal: opts.showSignal,\n          suffixUnit: opts.suffixUnit && (\" \" + opts.suffixUnit.replace(/[\\s]/g,'')) || \"\",\n          unit: opts.unit && (opts.unit.replace(/[\\s]/g,'') + \" \") || \"\",\n          zeroCents: opts.zeroCents\n        };\n        opts.moneyPrecision = opts.zeroCents ? 0 : opts.precision;\n        return opts;\n      },\n      // Fill wildcards past index in output with placeholder\n      addPlaceholdersToOutput = function(output, index, placeholder) {\n        for (; index < output.length; index++) {\n          if(output[index] === DIGIT || output[index] === ALPHA || output[index] === ALPHANUM) {\n            output[index] = placeholder;\n          }\n        }\n        return output;\n      }\n  ;\n\n  var VanillaMasker = function(elements) {\n    this.elements = elements;\n  };\n\n  VanillaMasker.prototype.unbindElementToMask = function() {\n    for (var i = 0, len = this.elements.length; i < len; i++) {\n      this.elements[i].lastOutput = \"\";\n      this.elements[i].onkeyup = false;\n      this.elements[i].onkeydown = false;\n\n      if (this.elements[i].value.length) {\n        this.elements[i].value = this.elements[i].value.replace(/\\D/g, '');\n      }\n    }\n  };\n\n  VanillaMasker.prototype.bindElementToMask = function(maskFunction) {\n    var that = this,\n        onType = function(e) {\n          e = e || window.event;\n          var source = e.target || e.srcElement;\n\n          if (isAllowedKeyCode(e.keyCode)) {\n            setTimeout(function() {\n              that.opts.lastOutput = source.lastOutput;\n              source.value = VMasker[maskFunction](source.value, that.opts);\n              source.lastOutput = source.value;\n              if (source.setSelectionRange && that.opts.suffixUnit) {\n                source.setSelectionRange(source.value.length, (source.value.length - that.opts.suffixUnit.length));\n              }\n            }, 0);\n          }\n        }\n    ;\n    for (var i = 0, len = this.elements.length; i < len; i++) {\n      this.elements[i].lastOutput = \"\";\n      this.elements[i].onkeyup = onType;\n      if (this.elements[i].value.length) {\n        this.elements[i].value = VMasker[maskFunction](this.elements[i].value, this.opts);\n      }\n    }\n  };\n\n  VanillaMasker.prototype.maskMoney = function(opts) {\n    this.opts = mergeMoneyOptions(opts);\n    this.bindElementToMask(\"toMoney\");\n  };\n\n  VanillaMasker.prototype.maskNumber = function() {\n    this.opts = {};\n    this.bindElementToMask(\"toNumber\");\n  };\n  \n  VanillaMasker.prototype.maskAlphaNum = function() {\n    this.opts = {};\n    this.bindElementToMask(\"toAlphaNumeric\");\n  };\n\n  VanillaMasker.prototype.maskPattern = function(pattern) {\n    this.opts = {pattern: pattern};\n    this.bindElementToMask(\"toPattern\");\n  };\n\n  VanillaMasker.prototype.unMask = function() {\n    this.unbindElementToMask();\n  };\n\n  var VMasker = function(el) {\n    if (!el) {\n      throw new Error(\"VanillaMasker: There is no element to bind.\");\n    }\n    var elements = (\"length\" in el) ? (el.length ? el : []) : [el];\n    return new VanillaMasker(elements);\n  };\n\n  VMasker.toMoney = function(value, opts) {\n    opts = mergeMoneyOptions(opts);\n    if (opts.zeroCents) {\n      opts.lastOutput = opts.lastOutput || \"\";\n      var zeroMatcher = (\"(\"+ opts.separator +\"[0]{0,\"+ opts.precision +\"})\"),\n          zeroRegExp = new RegExp(zeroMatcher, \"g\"),\n          digitsLength = value.toString().replace(/[\\D]/g, \"\").length || 0,\n          lastDigitLength = opts.lastOutput.toString().replace(/[\\D]/g, \"\").length || 0\n      ;\n      value = value.toString().replace(zeroRegExp, \"\");\n      if (digitsLength < lastDigitLength) {\n        value = value.slice(0, value.length - 1);\n      }\n    }\n    var number = value.toString().replace(/[\\D]/g, \"\"),\n        clearDelimiter = new RegExp(\"^(0|\\\\\"+ opts.delimiter +\")\"),\n        clearSeparator = new RegExp(\"(\\\\\"+ opts.separator +\")$\"),\n        money = number.substr(0, number.length - opts.moneyPrecision),\n        masked = money.substr(0, money.length % 3),\n        cents = new Array(opts.precision + 1).join(\"0\")\n    ;\n    money = money.substr(money.length % 3, money.length);\n    for (var i = 0, len = money.length; i < len; i++) {\n      if (i % 3 === 0) {\n        masked += opts.delimiter;\n      }\n      masked += money[i];\n    }\n    masked = masked.replace(clearDelimiter, \"\");\n    masked = masked.length ? masked : \"0\";\n    var signal = \"\";\n    if(opts.showSignal === true) {\n      signal = value < 0 || (value.startsWith && value.startsWith('-')) ? \"-\" :  \"\";\n    }\n    if (!opts.zeroCents) {\n      var beginCents = number.length - opts.precision,\n          centsValue = number.substr(beginCents, opts.precision),\n          centsLength = centsValue.length,\n          centsSliced = (opts.precision > centsLength) ? opts.precision : centsLength\n      ;\n      cents = (cents + centsValue).slice(-centsSliced);\n    }\n    var output = opts.unit + signal + masked + opts.separator + cents;\n    return output.replace(clearSeparator, \"\") + opts.suffixUnit;\n  };\n\n  VMasker.toPattern = function(value, opts) {\n    var pattern = (typeof opts === 'object' ? opts.pattern : opts),\n        patternChars = pattern.replace(/\\W/g, ''),\n        output = pattern.split(\"\"),\n        values = value.toString().replace(/\\W/g, \"\"),\n        charsValues = values.replace(/\\W/g, ''),\n        index = 0,\n        i,\n        outputLength = output.length,\n        placeholder = (typeof opts === 'object' ? opts.placeholder : undefined)\n    ;\n    \n    for (i = 0; i < outputLength; i++) {\n      // Reached the end of input\n      if (index >= values.length) {\n        if (patternChars.length == charsValues.length) {\n          return output.join(\"\");\n        }\n        else if ((placeholder !== undefined) && (patternChars.length > charsValues.length)) {\n          return addPlaceholdersToOutput(output, i, placeholder).join(\"\");\n        }\n        else {\n          break;\n        }\n      }\n      // Remaining chars in input\n      else{\n        if ((output[i] === DIGIT && values[index].match(/[0-9]/)) ||\n            (output[i] === ALPHA && values[index].match(/[a-zA-Z]/)) ||\n            (output[i] === ALPHANUM && values[index].match(/[0-9a-zA-Z]/))) {\n          output[i] = values[index++];\n        } else if (output[i] === DIGIT || output[i] === ALPHA || output[i] === ALPHANUM) {\n          if(placeholder !== undefined){\n            return addPlaceholdersToOutput(output, i, placeholder).join(\"\");\n          }\n          else{\n            return output.slice(0, i).join(\"\");\n          }\n        }\n      }\n    }\n    return output.join(\"\").substr(0, i);\n  };\n\n  VMasker.toNumber = function(value) {\n    return value.toString().replace(/(?!^-)[^0-9]/g, \"\");\n  };\n  \n  VMasker.toAlphaNumeric = function(value) {\n    return value.toString().replace(/[^a-z0-9 ]+/i, \"\");\n  };\n\n  return VMasker;\n}));\n\n\n//# sourceURL=webpack:///./node_modules/vanilla-masker/lib/vanilla-masker.js?");

/***/ }),

/***/ "./src/FormValidator.js":
/*!******************************!*\
  !*** ./src/FormValidator.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FormValidator; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n/* harmony import */ var _defaultRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultRules */ \"./src/defaultRules.js\");\n/* harmony import */ var _FormValidatorRule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FormValidatorRule */ \"./src/FormValidatorRule.js\");\n/* harmony import */ var _FormValidatorField__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FormValidatorField */ \"./src/FormValidatorField.js\");\n/* harmony import */ var _Logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Logger */ \"./src/Logger.js\");\n/* harmony import */ var deep_spread__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! deep-spread */ \"./node_modules/deep-spread/index.js\");\n/* harmony import */ var deep_spread__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(deep_spread__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n\nconst removeUndefinedObjectKeys = (obj) => {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] === undefined) {\n            delete obj[key];\n        }\n    });\n    return obj\n};\n\nclass FormValidator {\n    \n    constructor(formId, options={}) {\n            \n        this.logger = new _Logger__WEBPACK_IMPORTED_MODULE_4__[\"default\"](options.debug);\n\n        this.logger.log(\"constructor(): New validator instance\");\n        this.formId = formId;\n\n        this.options = Object(deep_spread__WEBPACK_IMPORTED_MODULE_5__[\"deepSpread\"])(options, _constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEFAULT_OPTIONS);;\n        \n        if(!document.getElementById(formId)) {\n            this.logger.logError(\"constructor(): Couldn't find form element \\\"#\"+formId+\"\\\"\");\n            return;\n        } else {\n            this.logger.log(\"constructor(): Validator will be initialized to \\\"#\"+formId+\"\\\"\");\n\n                // Register instance\n            if(!window.formValidator_instances) {\n                window.formValidator_instances = {}\n            }\n            if(!window.formValidator_instances[this.formId]) {\n                window.formValidator_instances[this.formId] = this;\n                \n                return this.init();\n                \n            } else {\n                this.logger.logError(\"init(): A FormValidator instance has already been initialized for the form \\\"#\"+this.formId+\"\\\"\");   \n            }\n            \n        }\n        \n    }\n\n\n    init() {\n        this.logger.log(\"init(): Initializing validator...\");   \n\n        this.$form = document.getElementById(this.formId);\n        \n        this.fieldRenderPreferences = this.options.fieldRenderPreferences;\n\n        this.events = this.options.events;\n        this.validateFieldOnBlur = this.options.validateFieldOnBlur;\n        this.validateFieldOnInput = this.options.validateFieldOnInput;\n        this.resetFieldValidationOnChange = this.options.resetFieldValidationOnChange;\n        this.submitFn = this.options.submitFn;\n        this.showLoadingFn = this.options.showLoadingFn;\n        this.hideLoadingFn = this.options.hideLoadingFn;\n        this.groupWrapperHiddenClass = this.options.groupWrapperHiddenClass;\n        this.groupWrapperVisibleClass = this.options.groupWrapperVisibleClass;\n        this.enableDataRestore = this.options.enableDataRestore;\n        this.enableDataRestoreValidation = this.options.enableDataRestoreValidation;\n\n        this.submitting = false;\n        this.fields = {};\n        this.defaultRules = _defaultRules__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n        this._repeatables = {};\n        \n        if(!this.$form) {\n            this.logger.logError(\"init(): Couldn't find a form with id '\"+this.formId+\"'\"); \n            return false;\n        }\n\n        this.logger.log(\"init(): Registering fields...\"); \n\n        this.options.fields.forEach(fieldObject => {\n            this.registerField(fieldObject);\n        }) \n\n        var handleFormSubmit = (e) => {\n            e.preventDefault();\n            this.submit(e)\n        }\n        this.$form.addEventListener('submit', handleFormSubmit)\n\n        var handleFormChange = (e) => {\n            if(this.enableDataRestore) {\n                this.updateFormState();\n            }\n            this.updateDependencyRules(true)\n        }\n        this.$form.addEventListener('change', handleFormChange)\n\n        \n        this._options = this.options;\n        delete this.options\n        delete this.formId\n        \n        \n        if(this.enableDataRestore) {\n            this.applyFormState();\n            this.updateFormState();\n        } else { \n            this.resetForm();\n        }\n\n        this.updateDependencyRules()\n        \n        this.events.onInit && (this.events.onInit(this));\n\n        this.logger.log(\"init(): Validator has been initialized\", this);   \n\n\n        this.destroy = () => {\n            this.logger.log(\"destroy(): Destroying validator...\");    \n            this.deleteFormState();\n            this.resetValidation();\n            this.eachField((field) => {\n                field.unregister()\n            })            \n            this.$form.removeEventListener('submit', handleFormSubmit)\n            this.$form.removeEventListener('change', handleFormChange)\n\n        }\n\n    }\n    \n    registerField(fieldObject) {\n\n        if(this.fields[fieldObject.name]) {\n            this.unregisterField(fieldObject.name)\n        }\n\n        var _validator = this;\n\n        var _registerField = (obj) => {\n            if(!obj.name || !this.$form.querySelector('[name=\"'+obj.name+'\"]')) {\n                this.logger.logError(\"registerField(): Couldn't find a field with name '\"+obj.name+\"'\"); \n            } else {\n                obj._validator = _validator;\n                this.fields[obj.name] = new _FormValidatorField__WEBPACK_IMPORTED_MODULE_3__[\"default\"](obj, this.logger.showLogs);\n            }\n        }\n\n        if(typeof fieldObject.name === \"object\") {\n            fieldObject.name.forEach(fieldName => {\n                let obj = fieldObject;\n                obj.name = fieldName;\n                _registerField(obj);\n            })\n        } else {\n            let obj = fieldObject;\n            _registerField(obj);\n        }\n    }\n\n    unregisterField(fieldName) {\n        this.fields[fieldName].unregister()\n    }\n\n    eachField(fn) {\n\n        Object.keys(this.fields).forEach(k => {\n            return fn(this.fields[k])\n        })\n        \n    }\n    \n    isValid(fieldsNames=[]) {\n        let hasInvalidField = false;\n\n        if(!fieldsNames.length) {\n            this.eachField((field) => {\n                if(field._status !== 1) {\n                    hasInvalidField = true;\n                }\n            }) \n        } else {\n            fieldsNames.forEach(fieldName => {\n                if(this.fields[fieldName]._status !== 1) {\n                    hasInvalidField = true;\n                }\n            })\n        }\n\n        return !hasInvalidField\n\n    }\n\n    getFirstInvalidField() {\n        let firstInvalidField = undefined;\n        Object.keys(this.fields).every((k) => {\n            let field = this.fields[k];\n            if(field._status === 0) {\n                firstInvalidField = field;\n                return false;\n            }\n            return true\n        })\n        return firstInvalidField\n    }\n\n    isValidating() {\n        let isValidating = false;\n        this.eachField(field => {\n            if(field._status === -1) {\n                isValidating = true;\n            }\n        })\n        return isValidating\n    }\n    \n    getGroupWrapper(groupName) {\n        let $wrapper = this.$form.querySelector('['+_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GROUP_WRAPPER_DATA_ATTRIBUTE+'=\"' + groupName + '\"]');\n        return $wrapper\n    }\n\n    getGroupFields(groupName) {\n        var fields = [];\n        this.eachField(field => {\n            if(field.group == groupName) {\n                fields.push(field)\n            }\n        })\n        return fields\n    }\n\n\n    validate(fieldsNames=[], cb=()=>{}) {\n        let v = () => {\n            // this.resetValidation(fieldsNames)\n            this._validate(fieldsNames).then((x) => {cb(true)}).catch((x) => {cb(false)})\n        }\n        setTimeout(v,1);\n\n    }\n\n    _validate(fieldsNames=[], silentMode=false) {\n\n        this.logger.log(\"validate(): Form will be validated\");\n        this.events.onBeforeValidate && (this.events.onBeforeValidate(this));\n        \n        let handleValidationPromise = (resolveValidationPromise, rejectValidationPromise) => {\n            let fieldsValidationPromises = [];\n\n\n            if(!fieldsNames.length) {\n                this.eachField((field) => {\n                    fieldsValidationPromises.push(field._validate(silentMode))\n                }) \n            } else {\n                fieldsNames.forEach(fieldName => {\n                    fieldsValidationPromises.push(this.fields[fieldName]._validate(silentMode))\n                })\n            }\n            \n\n\n            Promise.all(fieldsValidationPromises).then(() => {\n                resolveValidationPromise()\n            }).catch(() => {\n                rejectValidationPromise()\n            }).finally(() => {\n                this.events.onValidate && (this.events.onValidate(this));\n            })\n        }\n        return new Promise(handleValidationPromise);\n        \n    }\n    \n    resetValidation(fieldsNames=[]) {\n\n        if(this.submitting || this.isValidating()) {\n            return;\n        }\n        \n        if(!fieldsNames.length) {\n            this.eachField((field) => {\n                field.setUnvalidated();\n            }) \n        } else {\n            fieldsNames.forEach(fieldName => {\n                this.fields[fieldName].setUnvalidated();\n            })\n        }\n\n        this.updateDependencyRules()\n        this.logger.log(\"resetForm(): Form validation has been reset\");\n    }\n\n    resetForm() {\n\n        if(this.submitting || this.isValidating()) {\n            return;\n        }\n\n        this.events.onBeforeReset && (this.events.onBeforeReset(this));\n\n        this.deleteFormState()\n        this.$form.reset();\n        this.resetValidation()\n\n\n        if(this._repeatables) {\n            Object.keys(this._repeatables).forEach((repeatableInstanceIdentifier) => {\n                let repetitionAmount = this._repeatables[repeatableInstanceIdentifier]\n                for(let i=0; i<repetitionAmount; i++) {\n                    this.removeRepeatable(repeatableInstanceIdentifier)\n                }\n            })\n        }\n        \n        this.logger.log(\"resetForm(): Form has been reset\");\n        this.events.onReset && (this.events.onReset(this));\n\n    }\n\n    deleteFormState() {\n        if(window.localStorage['FORMVALIDATOR_FORMDATA_'+this.$form.getAttribute('id')]) {\n            delete window.localStorage['FORMVALIDATOR_FORMDATA_'+this.$form.getAttribute('id')]\n        }\n        \n    }\n\n    updateFormState() {\n\n        let validationStatuses = {};\n        Object.keys(this.fields).forEach(fieldName => {\n            if(!this.fields[fieldName]) {\n                return;\n            }\n            let field = this.fields[fieldName];\n            validationStatuses[field.name] = {\n                _status: field._status,\n                status: field.status,\n                message: field.message\n            }\n        })\n\n        window.localStorage.setItem('FORMVALIDATOR_FORMDATA_'+this.$form.getAttribute('id'), JSON.stringify({\n            \"data\": this.getSerializedFormData(),\n            \"repeatables\": this._repeatables,\n            \"validation\": validationStatuses\n        }));\n\n    }\n\n    applyFormState() {\n        let _storage = window.localStorage['FORMVALIDATOR_FORMDATA_'+this.$form.getAttribute('id')];\n\n        if(_storage) {\n            let storage = JSON.parse(_storage);\n\n\n            if(storage.repeatables) {\n                Object.keys(storage.repeatables).forEach((repeatableInstanceIdentifier) => {\n                    let repetitionAmount = storage.repeatables[repeatableInstanceIdentifier]\n                    for(let i=0; i<repetitionAmount; i++) {\n                        this.addRepeatable(repeatableInstanceIdentifier, false)\n                    }\n                })\n            }\n\n            if(storage.data) {\n                let serializedForm = storage.data;\n\n                Object.keys(serializedForm).forEach(key => {\n                    let value = serializedForm[key];\n                    let field = this.fields[key];\n                    if(field) {\n                        field.setValue(value)\n                        if(this.enableDataRestoreValidation && storage.validation && storage.validation[key] !== undefined) {\n                            let validation = storage.validation[key];\n                            if(validation.status === 1) { \n                                field.setValid(validation.message)\n                            } else if(validation.status === 0) { \n                                field.setInvalid(validation.message)\n                            } else {\n                                field.setUnvalidated()\n                            }\n                        }\n                    }\n                    \n                })\n\n                if(!this.enableDataRestoreValidation) {\n                    this.resetValidation()\n                }\n\n            }\n\n        }\n        else {\n            this.resetValidation()\n        }\n    }\n\n    handlePreventingDefault(e) {\n        e.preventDefault();\n    }\n    \n    disableForm() {\n        this.eachField(field => {\n            field.disableInteraction()\n        })\n        this.$form.style.opacity = \"0.7\"\n        this.logger.log(\"disableForm(): Form has been disabled\");\n    }\n    \n    enableForm() {\n        this.eachField(field => {\n            field.enableInteraction()\n        })\n        this.$form.style.opacity = \"1\"\n        this.logger.log(\"enableForm(): Form has been enabled\");\n    }\n\n    getDependencyRuleTargetFields(depRuleObject) {\n        let fields = []\n        depRuleObject.groups.forEach(groupName => {\n            let groupFields = this.getGroupFields(groupName)\n            groupFields.forEach(groupField => {\n                fields.push(groupField)\n            })\n        })\n        depRuleObject.fields.forEach(dependencyRuleFieldName => {\n            let dependentField = this.fields[dependencyRuleFieldName];\n            fields.push(dependentField)\n        })\n        return fields\n    }\n\n    updateDependencyRules(resetValueOnToggle=false) {\n\n        this.logger.log(\"updateDependencyRules(): Updating...\", this);   \n\n        Object.keys(this.fields).forEach(k => {\n\n            var field = this.fields[k];\n            \n            if(field.dependencyRules !== undefined) {\n\n                field.dependencyRules.forEach(depRuleObject => {\n\n                    if(!depRuleObject.fields){\n                        depRuleObject.fields = [];\n                    }\n                    if(!depRuleObject.groups){\n                        depRuleObject.groups = [];\n                    }\n\n                    let targetFields = this.getDependencyRuleTargetFields(depRuleObject)\n\n                    let hide = () => {\n\n                            depRuleObject.groups.forEach(groupName => {\n                                let $groupWrapper = this.getGroupWrapper(groupName);\n                                if($groupWrapper) {\n                                    $groupWrapper.classList.add(this.groupWrapperHiddenClass);\n                                    $groupWrapper.classList.remove(this.groupWrapperVisibleClass);\n                                }\n                            })\n                            \n                            targetFields.forEach(targetField => {\n                                let renderPrefs = targetField.getFieldRenderPreferences();\n                                if(!Array.from(targetField.$wrapper.classList).includes(renderPrefs.wrapperHiddenClass)) {\n\n                                    targetField.$wrapper.classList.add(renderPrefs.wrapperHiddenClass);\n                                    targetField.$wrapper.classList.remove(renderPrefs.wrapperVisibleClass);\n                                    targetField.disableRules()\n                                    targetField.status = 1;\n                                    targetField._status = 1;\n\n                                    if(resetValueOnToggle) {\n                                        // targetField.setValue('')\n                                    }\n                                }\n                            })\n\n\n                    }\n                    let show = () => {\n                        \n                            depRuleObject.groups.forEach(groupName => {\n                                let $groupWrapper = this.getGroupWrapper(groupName);\n                                if($groupWrapper) {\n                                    $groupWrapper.classList.remove(this.groupWrapperHiddenClass)\n                                    $groupWrapper.classList.add(this.groupWrapperVisibleClass)\n                                }\n                            })\n    \n                            targetFields.forEach(targetField => {\n                                let renderPrefs = targetField.getFieldRenderPreferences();\n\n                                if(Array.from(targetField.$wrapper.classList).includes(renderPrefs.wrapperHiddenClass)) {\n\n                                    targetField.$wrapper.classList.remove(renderPrefs.wrapperHiddenClass)\n                                    targetField.$wrapper.classList.add(renderPrefs.wrapperVisibleClass)\n                                    targetField.enableRules()\n                                    targetField.status = undefined\n                                    targetField._status = undefined\n\n                                    if(resetValueOnToggle) {\n                                        targetField.setValue('')\n                                    }\n                                }\n                            })\n                        \n                    }\n\n                    \n                    if(this.defaultRules[depRuleObject.name]) {\n                        depRuleObject = {...this.defaultRules[depRuleObject.name], ...removeUndefinedObjectKeys(depRuleObject)}\n                    }\n\n\n                    var rule = new _FormValidatorRule__WEBPACK_IMPORTED_MODULE_2__[\"default\"](depRuleObject)\n\n                    rule.test(field.getValue()).then(() => {\n                        this.events.onBeforeShowDependentFields && (this.events.onBeforeShowDependentFields(targetFields));\n                        show()\n                        this.events.onShowDependentFields && (this.events.onShowDependentFields(targetFields));\n                    }).catch(() => {\n                        this.events.onBeforeHideDependentFields && (this.events.onBeforeHideDependentFields(targetFields));\n                        hide()\n                        this.events.onHideDependentFields && (this.events.onHideDependentFields(targetFields));\n                    })\n\n                })\n            }\n        })\n    }\n\n\n    showLoading() {\n        if(this.showLoadingFn !== undefined) {\n            this.showLoadingFn(this)\n        }\n    }\n\n    hideLoading() {\n        if(this.hideLoadingFn !== undefined) {\n            this.hideLoadingFn(this)\n        }\n    }\n\n    getFormData() {\n        return new FormData(this.$form);\n    }\n\n    getSerializedFormData() {\n        let obj = {};\n        for (let [key, value] of this.getFormData()) {\n            if (obj[key] !== undefined) {\n                if (!Array.isArray(obj[key])) {\n                    obj[key] = [obj[key]];\n                }\n                obj[key].push(value);\n            } else {\n                obj[key] = value;\n            }\n        }\n        return obj;\n\n    }\n\n    submit(e) {\n\n\n        let _submit = () => {\n\n            this.events.onBeforeSubmit && (this.events.onBeforeSubmit(this));\n            \n            this.logger.log(\"submit(): Submitting form\", this); \n\n            this.showLoading();\n\n            if(this.submitFn) {\n                \n                this.disableForm();\n\n                let handleSubmissionCallback = callback => {\n                    this.submitting = false\n                    this.hideLoading();\n                    if(callback) {\n                        this.events.onSubmit && (this.events.onSubmit(this));\n                        this.resetForm();\n                    } else {\n                        this.submitting = false\n                        this.logger.log(\"submit(): Form can't be submitted\", this); \n                        this.events.onSubmitFail && (this.events.onSubmitFail(this));\n                    }\n                    this.enableForm();\n                    \n                }\n                this.submitFn(this, handleSubmissionCallback)\n                \n            } else {\n                this.submitting = false;\n                this.hideLoading();\n                this.$form.submit()\n                this.events.onSubmit && (this.events.onSubmit(this));\n                this.resetForm();\n            }\n        }\n\n        // Process\n        this.events.onTrySubmit && (this.events.onTrySubmit(this));\n\n        if(this.getFirstInvalidField()) {\n            this.getFirstInvalidField().elements[0].focus()\n        }\n\n        \n        if(this.submitting === true || this.isValidating()) {\n            return;\n        } else {\n            this.submitting = true\n\n            this._validate().then(() => {\n                if(this.isValid()) {\n                    _submit()\n                } else {\n                    this.submitting = false\n                }\n            }).catch(() => {\n                this.submitting = false\n                if(this.getFirstInvalidField()) {\n                    this.getFirstInvalidField().elements[0].focus()\n                }\n            })\n        \n\n        }\n        \n    }\n\n\n    getNodeChildrenFieldsNames($wrapper) {\n        \n        let _fields = {};\n        let fields = [];\n\n        Array.from($wrapper.querySelectorAll('['+_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INITIALIZED_FIELD_DATA_ATTRIBUTE+']')).forEach(node => {\n            if(node.hasAttribute('name') && this.fields[node.getAttribute('name')]) {\n                _fields[node.getAttribute('name')] = true;\n            }\n        })\n\n\n        Object.keys(_fields).forEach((fieldName) => {\n            fields.push(fieldName)\n        })\n\n        return fields\n\n    }\n\n\n    addRepeatable(repeatableIdentifier, clearValue=true) { \n        \n        var $repeatableWrapper = document.querySelector('['+_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].REPEATABLE_WRAPPER_DATA_ATTRIBUTE+'=\"'+repeatableIdentifier+'\"]');\n        var $firstItem = $repeatableWrapper.querySelectorAll('['+_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].REPEATABLE_ITEM_DATA_ATTRIBUTE+']')[0];\n        var itemsCount = $repeatableWrapper.querySelectorAll('['+_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].REPEATABLE_ITEM_DATA_ATTRIBUTE+']').length;\n        \n        var limit = Number($repeatableWrapper.getAttribute(_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].REPEATABLE_LIMIT_DATA_ATTRIBUTE));\n        if(limit > 1 && itemsCount >= limit) {\n            return\n        }\n\n        this._repeatables[repeatableIdentifier] = itemsCount;\n\n        let repeatingFieldsNames = this.getNodeChildrenFieldsNames($firstItem);\n        \n        let revalidatingFieldsNames = [];\n        let unvalidatingFieldsNames = [];\n\n        repeatingFieldsNames.forEach(fieldName => {\n            this.fields[fieldName].removeValidationElements();\n            if(this.fields[fieldName].status === 0 || this.fields[fieldName].status === 1 || this.fields[fieldName].status === -1) {\n                revalidatingFieldsNames.push(fieldName)\n            } else {\n                unvalidatingFieldsNames.push(fieldName)\n            }\n        })\n\n        let $clone = $firstItem.cloneNode(true);\n        \n        repeatingFieldsNames.forEach((fieldName) => {\n            let newFieldName = fieldName+itemsCount;\n\n            let inputs = $clone.querySelectorAll('[name=\"'+fieldName+'\"]');\n            inputs.forEach($input => {\n                $input.setAttribute('id', $input.getAttribute('id')+itemsCount)\n                $input.setAttribute('name', $input.getAttribute('name')+itemsCount)\n            })\n\n            let labels = $clone.querySelectorAll('label[for=\"'+fieldName+'\"]');\n            labels.forEach($label => {\n                if($label.hasAttribute('for')) {\n                    $label.setAttribute('for', $label.getAttribute('for')+itemsCount)\n                    $label.innerHTML = $label.innerHTML + \" (\"+(itemsCount+1)+\")\"\n\n                }\n            })\n\n            $repeatableWrapper.appendChild($clone);\n            let field = this.registerField({\n                ...this.fields[fieldName],\n                name: newFieldName,\n            });\n            if(clearValue) {\n                this.fields[newFieldName].setValue('');\n            }\n            this.fields[newFieldName].setUnvalidated();\n            \n            \n        })\n            \n        revalidatingFieldsNames.forEach(fieldName => {\n            this.fields[fieldName].validate();\n        })\n        unvalidatingFieldsNames.forEach(fieldName => {\n            this.fields[fieldName].setUnvalidated();\n        })\n\n        this.updateFormState()\n\n            \n\n    }\n\n    removeRepeatable(repeatableIdentifier, repeatableNumber=-1) {\n\n        var $repeatableWrapper = document.querySelector('['+_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].REPEATABLE_WRAPPER_DATA_ATTRIBUTE+'=\"'+repeatableIdentifier+'\"]');\n        var repeatableItems = $repeatableWrapper.querySelectorAll('['+_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].REPEATABLE_ITEM_DATA_ATTRIBUTE+']');\n\n        if(repeatableItems.length <= 1) {\n            return \n        }       \n        let repeatingFieldsNames;\n\n        if(repeatableNumber !== -1) {\n            repeatableNumber = Number(repeatableNumber);\n        } else {\n            repeatableNumber = repeatableItems.length-1;\n        }\n        \n        repeatingFieldsNames = this.getNodeChildrenFieldsNames(repeatableItems[repeatableNumber]);\n        repeatingFieldsNames.forEach(fieldName => {\n            this.unregisterField(fieldName)\n        })\n\n        repeatableItems[repeatableNumber].remove()\n        this._repeatables[repeatableIdentifier] = this._repeatables[repeatableIdentifier]-1;\n        if(this._repeatables[repeatableIdentifier] < 1) {\n            delete this._repeatables[repeatableIdentifier]\n        }\n        this.updateFormState()\n\n    }\n    \n}\n\n//# sourceURL=webpack:///./src/FormValidator.js?");

/***/ }),

/***/ "./src/FormValidatorField.js":
/*!***********************************!*\
  !*** ./src/FormValidatorField.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FormValidatorField; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n/* harmony import */ var _FormValidatorRule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FormValidatorRule */ \"./src/FormValidatorRule.js\");\n/* harmony import */ var _Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Logger */ \"./src/Logger.js\");\n/* harmony import */ var vanilla_masker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vanilla-masker */ \"./node_modules/vanilla-masker/lib/vanilla-masker.js\");\n/* harmony import */ var vanilla_masker__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(vanilla_masker__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var deep_spread__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! deep-spread */ \"./node_modules/deep-spread/index.js\");\n/* harmony import */ var deep_spread__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(deep_spread__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\nconst parseHTML = (htmlString) => {\n    const parser = new DOMParser();\n    return parser.parseFromString(htmlString.trim(), 'text/html').body.firstChild;\n\n} \nconst removeUndefinedObjectKeys = (obj) => {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] === undefined) {\n            delete obj[key];\n        }\n    });\n    return obj\n};\n\nPromise.series = function series(arrayOfPromises) {\n    var results = [];\n    return arrayOfPromises.reduce(function(seriesPromise, promise) {\n      return seriesPromise.then(function() {\n        return promise\n        .then(function(result) {\n          results.push(result);\n        });\n      });\n    }, Promise.resolve())\n    .then(function() {\n      return results;\n    });\n};\n\nclass FormValidatorField {\n\n    constructor(fieldObject, debug=false) {\n\n        this.logger = new _Logger__WEBPACK_IMPORTED_MODULE_2__[\"default\"](debug);\n\n        if(!fieldObject._validator.$form.querySelectorAll('[name=\"'+fieldObject.name+'\"]').length) {\n            return;\n        }\n\n        this._validator = fieldObject._validator;\n\n        this.name = fieldObject.name;\n        this.group = fieldObject.group;\n        this.elements = Array.from(fieldObject._validator.$form.querySelectorAll('[name=\"'+fieldObject.name+'\"]'));\n        \n        this.interactive = fieldObject.interactive;\n        this.mask = fieldObject.mask;\n        this.dependencyRules = fieldObject.dependencyRules;\n        this.useRules = true;\n        \n        this.rules = fieldObject.rules || [];\n        this.events = fieldObject.events;\n        this.fieldRenderPreferences = fieldObject.fieldRenderPreferences;\n        this.resetFieldValidationOnChange = fieldObject.resetFieldValidationOnChange;\n        this.validateFieldOnInput = fieldObject.validateFieldOnInput;\n        this.validateFieldOnBlur = fieldObject.validateFieldOnBlur;\n        \n        this.register();\n        \n    }\n\n\n    getFieldRenderPreferences() {\n        let fieldRenderPreferences = this._validator.fieldRenderPreferences;\n        \n        if(this.fieldRenderPreferences !== undefined) {\n            fieldRenderPreferences = Object(deep_spread__WEBPACK_IMPORTED_MODULE_4__[\"deepSpread\"])(this.fieldRenderPreferences, this._validator.fieldRenderPreferences);\n        }\n        \n        return fieldRenderPreferences\n    }\n\n    getEvents() {\n        let events\n        if(this.events !== undefined) {\n            events = {...this._validator.events, ...removeUndefinedObjectKeys(this.events)}\n        } else {\n            events = this._validator.events\n        }\n        \n        return events\n    }\n\n\n    getValidateFieldOnBlur() {\n        if(this.validateFieldOnBlur === undefined) {\n            return this._validator.validateFieldOnBlur\n        } else {\n            return this.validateFieldOnBlur\n        }\n    }\n\n    getResetFieldValidationOnChange() {\n        if(this.resetFieldValidationOnChange === undefined) {\n            return this._validator.resetFieldValidationOnChange\n        } else {\n            return this.resetFieldValidationOnChange\n        }\n    }\n\n    getValidateFieldOnInput() {\n        if(this.validateFieldOnInput === undefined) {\n            return this._validator.validateFieldOnInput\n        } else {\n            return this.validateFieldOnInput\n        }\n    }\n\n\n    register() {\n        \n        if(this.registered) {\n            return\n        }\n\n        var unregisterFns = [];\n\n        this.registered = true;\n        this.status = undefined;\n        this._status = undefined;\n        this.message = undefined;\n        this.validationElements = [];\n\n        var fieldRenderPreferences = this.getFieldRenderPreferences()\n        if(fieldRenderPreferences.wrapperClass && fieldRenderPreferences.wrapperClass.length) {\n            this.$wrapper = this.elements[0].closest('.'+fieldRenderPreferences.wrapperClass)\n        } else {\n            this.$wrapper = undefined\n        }\n        \n        let events = this.getEvents()\n        this.elements.forEach($field => {\n\n            $field.setAttribute(_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INITIALIZED_FIELD_DATA_ATTRIBUTE, \"true\");\n            \n            if($field.hasAttribute(\"readonly\")) {\n                $field.setAttribute(\"data-originally-readonly\", \"\")\n            }\n\n            let handleFieldInput = (e) => {\n\n                this.status = undefined;\n                this._status = undefined;\n\n                if(this.getResetFieldValidationOnChange()) {\n                    this.setUnvalidated();\n                    $field.focus()\n                }\n            \n                if(this.getValidateFieldOnInput()) {\n                    let validate = () => {\n                        this._validate().then((message) => {\n                        }).catch((message) => {\n                        }).finally(() => {\n                            $field.focus()\n                        })\n                    }\n                    validate()\n                }\n\n                (events && events.onFieldInput) && (events.onFieldInput(this));\n\n            }\n\n            $field.addEventListener('input', handleFieldInput);        \n\n            let eventName = 'blur';\n            if($field.getAttribute(\"type\") === \"radio\" || $field.getAttribute(\"type\") === \"checkbox\") {\n                eventName = 'change'\n            }\n\n            var timeout;\n            let handleFieldValidationOnBlur = () => {\n\n                if(this.getValidateFieldOnBlur() && this.interactive) {\n\n                    if(eventName === 'change') {\n                        this.setUnvalidated();\n                        $field.focus()\n                    }\n                    let validate = () => {\n                        this._validate().then((message) => {\n                        }).catch((message) => {\n                        }).finally(() => {\n                            if(eventName === 'change') {\n                                $field.focus()\n                            }\n                        })\n                    }\n\n                    clearTimeout(timeout);\n                    timeout = setTimeout(validate, 1)\n\n                }\n            }\n\n            $field.addEventListener(eventName, handleFieldValidationOnBlur)\n\n            unregisterFns.push(() => {\n                $field.removeEventListener('input', handleFieldInput);\n                $field.removeEventListener(eventName, handleFieldValidationOnBlur);\n                $field.removeAttribute(_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INITIALIZED_FIELD_DATA_ATTRIBUTE);\n            })\n\n        })\n\n        if(this.mask) {\n            this.setMask(this.mask)\n        }\n\n        this.unregister = () => {\n            this.setUnvalidated();\n            unregisterFns.forEach(fn => {\n                fn()\n            })\n            this.unsetMask()\n            this.registered = false;\n\n            delete this._validator.fields[this.name]\n        }\n\n        return this\n    \n    }\n\n    getValue() {\n        if(this.elements.length > 1) { // radio or checkbox\n            let value = [];\n            if(this.elements[0].getAttribute(\"type\") === \"radio\" || this.elements[0].getAttribute(\"type\") === \"checkbox\") {\n                this.elements.forEach($field => {\n                    if($field.checked) {\n                        value.push($field.value)\n                    }\n                })\n            }\n            return value\n        } else {\n            return this.elements[0].value\n        }\n        \n    }\n\n    setValue(value) {\n\n        if(typeof value === \"object\") {\n            this.elements.forEach(($field, i) => {\n                if($field.hasAttribute('readonly') || $field.hasAttribute('disabled')) {\n                    return;\n                }\n                if($field.getAttribute(\"type\") === \"radio\" || $field.getAttribute(\"type\") === \"checkbox\") {\n                    if(value.includes($field.value)) {\n                        $field.checked = true\n                    } else {\n                        $field.checked = false\n                    }\n                } else {\n                    if(!value[i]) {\n                        value[i] = \"\"\n                    }\n                    $field.value = value[i]\n                }\n            })\n        } else {\n            this.elements.forEach(($field, i) => {\n                if($field.hasAttribute('readonly') || $field.hasAttribute('disabled')) {\n                    return;\n                }\n                if($field.getAttribute(\"type\") === \"radio\" || $field.getAttribute(\"type\") === \"checkbox\") {\n                    if(value === $field.value) {\n                        $field.checked = true\n                    } else {\n                        $field.checked = false\n                    }\n                } else {\n                    $field.value = value\n                }\n            })\n        }\n\n        this._validator.updateDependencyRules();\n        \n    }\n\n    \n    disableRules() {\n        this.useRules = false;\n    }\n    enableRules() {\n        this.useRules = true;\n    }\n\n    getRules() {\n        let rules = []\n        this.rules.forEach(ruleObject => {\n            if(typeof ruleObject === \"string\") {\n                if(ruleObject.indexOf(\":\") !== -1) {\n                    ruleObject = {\n                        name: ruleObject.split(\":\")[0],\n                        parameter: ruleObject.split(\":\")[1]\n                    }\n                } else {\n                    ruleObject = {\n                        name: ruleObject\n                    }\n                }\n                \n            }\n            if(this._validator.defaultRules[ruleObject.name]) {\n                ruleObject = {...this._validator.defaultRules[ruleObject.name], ...removeUndefinedObjectKeys(ruleObject)}\n            }\n            let rule = new _FormValidatorRule__WEBPACK_IMPORTED_MODULE_1__[\"default\"](ruleObject);\n            rules.push(rule)\n        })\n        return rules\n    }\n\n    setMask(pattern) {\n        this.unsetMask()\n        vanilla_masker__WEBPACK_IMPORTED_MODULE_3___default()(this.elements).maskPattern(pattern);\n    }\n\n    unsetMask() {\n        if(vanilla_masker__WEBPACK_IMPORTED_MODULE_3___default()(this.elements)) {\n            vanilla_masker__WEBPACK_IMPORTED_MODULE_3___default()(this.elements).unMask(); \n        }\n    }\n\n    handlePreventingDefault(e) {\n        e.preventDefault();\n    }\n\n    // Enable/disable field interaction\n    disableInteraction() {\n        this.elements.forEach($field => {\n        \n            $field.setAttribute(\"readonly\",\"readonly\");\n            $field.addEventListener(\"input\", this.handlePreventingDefault)\n            $field.addEventListener(\"click\", this.handlePreventingDefault)\n\n        })\n        this.interactive = false;\n    }\n\n    enableInteraction() {\n        this.elements.forEach($field => {\n            if(!$field.hasAttribute(\"data-originally-readonly\")) {\n                $field.removeAttribute(\"readonly\");\n            }\n            $field.removeEventListener(\"input\", this.handlePreventingDefault)\n            $field.removeEventListener(\"click\", this.handlePreventingDefault)\n\n        })\n        this.interactive = true;\n\n    }\n\n    _setFieldValidationStatus(statusName, message, silentMode=false) {\n\n        var capitalizedStatusName = statusName.charAt(0).toUpperCase() + statusName.slice(1);\n\n        if(statusName === \"validating\") {\n            this._status = -1;\n            this.disableInteraction();\n            if(!silentMode) {\n                this.status = -1;\n            }\n        } else if(statusName === \"valid\") {\n            this._status = 1;\n            this.enableInteraction();\n            if(!silentMode) {\n                this.status = 1;\n            }\n        } else if(statusName === \"invalid\") {\n            this._status = 0; //invalid \n            this.enableInteraction();\n            if(!silentMode) {\n                this.status = 0; //invalid \n            }\n        } else {\n            this._status = undefined; //unvalidated \n            this.enableInteraction();\n            if(!silentMode) {\n                this.status = undefined; //unvalidated \n            }\n        }\n\n        this.message = message;\n\n        if(!silentMode) {\n\n            this.removeValidationElements();\n\n            var fieldRenderPreferences = this.getFieldRenderPreferences()\n\n            if(fieldRenderPreferences[\"add\"+capitalizedStatusName+\"Class\"]) {\n                this.elements.forEach($field => {\n                    if(typeof this.getValue() === \"object\" && this.getValue().length > 0) {\n                        if(this.getValue().includes($field.value)) {\n                            $field.classList.add(fieldRenderPreferences[statusName+\"Class\"]);\n                        }\n                    } else {\n                        $field.classList.add(fieldRenderPreferences[statusName+\"Class\"]);\n                    }\n                    \n                })\n            }\n            if(fieldRenderPreferences[\"addWrapper\"+capitalizedStatusName+\"Class\"]) {\n                this.$wrapper.classList.add(fieldRenderPreferences[\"wrapper\"+capitalizedStatusName+\"Class\"]);\n            }\n\n            if(fieldRenderPreferences[\"show\"+capitalizedStatusName+\"Message\"] && message && message.length) {\n                this.message = message;\n                let messageHTML = fieldRenderPreferences[statusName+\"MessageHTML\"].replace(\"{{message}}\", message);\n                let $message = parseHTML(messageHTML);\n                this.$wrapper.appendChild($message);\n                this.validationElements.push($message);\n            }\n            \n        }\n\n    }\n\n    // Set visual states\n    setUnvalidated(message, silentMode) {\n\n        if(!message || !message.length) {\n            message = this.getFieldRenderPreferences().unvalidatedMessage;\n        }\n        this._setFieldValidationStatus(\"unvalidated\", message, silentMode); \n    }\n    setValidating(message, silentMode) {\n        this._setFieldValidationStatus(\"validating\", message, silentMode); \n    }\n    setValid(message, silentMode) {\n        this._setFieldValidationStatus(\"valid\", message, silentMode) \n    }\n    setInvalid(message, silentMode) {\n        this._setFieldValidationStatus(\"invalid\", message, silentMode) \n    }\n\n    \n    removeValidationElements() {\n        \n        let fieldRenderPreferences = this.getFieldRenderPreferences()\n\n        this.$wrapper.classList.remove(fieldRenderPreferences.wrapperUnvalidatedClass);\n        this.elements.forEach($field => {\n            $field.classList.remove(fieldRenderPreferences.unvalidatedClass);\n        })\n        this.$wrapper.classList.remove(fieldRenderPreferences.wrapperValidatingClass);\n        this.elements.forEach($field => {\n            $field.classList.remove(fieldRenderPreferences.validatingClass);\n        })\n        this.$wrapper.classList.remove(fieldRenderPreferences.wrapperValidClass);\n        this.elements.forEach($field => {\n            $field.classList.remove(fieldRenderPreferences.validClass);\n        })\n        this.$wrapper.classList.remove(fieldRenderPreferences.wrapperInvalidClass);\n        this.elements.forEach($field => {\n            $field.classList.remove(fieldRenderPreferences.invalidClass);\n        })\n\n        this.validationElements.forEach(validationElement => {\n            validationElement.remove()\n        })\n        this.validationElements = [];\n    }\n    \n    isValid() {\n        return this._status === 1\n    }\n\n\n    validate(cb=()=>{}) {\n    \n        this._validate().then((x) => {cb(true)}).catch((x) => {cb(false)})\n\n    }\n\n    _validate(silentMode=false) {\n\n        var fieldRenderPreferences = this.getFieldRenderPreferences()\n\n        let validatingMessage = fieldRenderPreferences.validatingMessage;\n        let validMessage = fieldRenderPreferences.validMessage;\n\n\n\n        if(this._status === -1) {\n            this.logger.logWarning(\"validate(): Field \\\"#\"+this.name+\"\\\" is still being validated\");\n            return new Promise((resolve, reject) => {\n                this.setValidating(validatingMessage, silentMode);\n                reject()\n            })\n        }\n\n        if(this._status === 1 || this._status === 0) {\n            let status = this._status;\n            this.logger.logWarning(\"validate(): Field \\\"#\"+this.name+\"\\\" hasn't changed since last validation\");\n            return new Promise((resolve, reject) => {\n                if(status === 1) {\n                    this.setValid(validMessage, silentMode);\n                    resolve()\n                } else {\n                    this.setInvalid(this.message, silentMode);\n                    reject()\n                }\n            })\n        }\n\n        if(!this.useRules && !this.interactive) {\n            return new Promise((resolve, reject) => {\n                resolve()\n            })\n        }\n\n        this.logger.log(\"validate(): Field \\\"#\"+this.name+\"\\\" will be validated\", this);\n\n        var events = this.getEvents();\n\n        (events && events.onBeforeValidateField) && (events.onBeforeValidateField(this));\n\n        this.setValidating(validatingMessage, silentMode);\n\n        let handleValidationPromise = async (resolveValidationPromise, rejectValidationPromise) => {\n            \n            var value = this.getValue()\n            var rules = this.getRules();\n  \n            var isValid = true;\n\n            function runRuleTest(rule, value) {\n                return rule.test(value);\n            } \n\n            for (const rule of rules) {\n\n                if(!isValid) {\n                    break;\n                }\n\n                await runRuleTest(rule, value).then(() => {}).catch((message) => {\n                    \n                    isValid = false;\n                    this.logger.log(\"validate(): Field \\\"#\"+this.name+\"\\\" is not valid\", this);\n                    this.setInvalid(message, silentMode);\n                    rejectValidationPromise();\n                    \n                    (events && events.onValidateField) && (events.onValidateField(this));\n                    this._validator.updateDependencyRules()\n                    this._validator.updateFormState()\n\n                });\n\n            }\n\n            if(isValid) {\n                this.logger.log(\"validate(): Field \\\"#\"+this.name+\"\\\" is valid\", this);\n                this.setValid(validMessage, silentMode);\n                resolveValidationPromise();\n                \n                (events && events.onValidateField) && (events.onValidateField(this));\n                this._validator.updateDependencyRules()\n                this._validator.updateFormState()\n\n            }\n\n\n\n        }\n\n\n        return new Promise(handleValidationPromise);\n\n    }\n\n\n}\n\n//# sourceURL=webpack:///./src/FormValidatorField.js?");

/***/ }),

/***/ "./src/FormValidatorRule.js":
/*!**********************************!*\
  !*** ./src/FormValidatorRule.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FormValidatorRule; });\nclass FormValidatorRule {\n    \n    constructor(ruleObject) { \n        this.name = ruleObject.name;\n        this.parameter = ruleObject.parameter;\n        this.message = ruleObject.message;\n        this.async = ruleObject.async;\n        this.fn = ruleObject.fn;\n\n        return this\n    }\n\n    test(value) {\n\n        var message = this.message\n        let handleRulePromise = (resolve, reject) => {\n            if(this.fn === undefined) {\n                resolve()\n            } else {\n                if(this.async === true) {\n                    this.fn(value, this.parameter, function(res) {\n                        if(res) {\n                            resolve()\n                        } else {\n                            reject(message)\n                        }\n                    })\n                } else {\n                    if(this.fn(value, this.parameter)) {\n                        resolve()\n                    } else {\n                        reject(message)\n                    }\n                }\n            }\n        }\n        \n        return new Promise(handleRulePromise)\n        \n    }\n    \n\n}\n\n\n//# sourceURL=webpack:///./src/FormValidatorRule.js?");

/***/ }),

/***/ "./src/FormValidatorStepsHandler.js":
/*!******************************************!*\
  !*** ./src/FormValidatorStepsHandler.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// Each step is a form\n// option: allowGoingBack\n// option: onlyAllowForwardingWhenStepIsValid\n// option autoStartOnFirstStep\n// fazer metodos avançar e voltar\n// cada passo tera uma classe pra dizer que o step está ativo/inativo, se é o proximo ou o anterior, se é o primeiro ou o último e idenficar o numero via html mesmo\n// Cada passo tb terá classe pra dizer se a step ta ativa ou inativa\n// eventos onStepActivate / inactivate\n\n\n/// Will suppress each validator's submit method???? \n\nclass FormValidatorStepsHandler {\n\n    constructor(options) {\n\n        this.steps = options.steps;\n        this.currentStepIndex = undefined;\n\n    }\n\n    init() {\n\n        if(this.steps.length <= 1) { // Duh!\n            return;\n        }\n\n        for(let i = 0; i < steps.length; i++) {\n            let step = steps[i];\n            let $stepForm = step.formValidatorInstance.$form;\n\n            let handleStepFormChange = (e) => {\n                this.update()\n            }\n\n            if(step.formValidatorInstance && step.formValidatorInstance.$form) {\n                $stepForm.addEventListener(\"change\", handleStepFormChange)\n\n                step.formValidatorInstance.submitFn = (validator => {\n                    console.log('enviando o step ', validator)\n                })\n            }\n\n        }\n\n        this.update();\n        this.start(); // TODO: if config says it auto starts\n        \n    }\n\n\n    update() {\n\n        console.log(\"update\")\n\n        for(let i = 0; i < this.steps.length; i++) {\n            let step = this.steps[i];\n            \n            console.log(\"updating step \" + i)\n\n            let status;\n            let enabled;\n\n            let stepValidator = step.formValidatorInstance;\n\n            if(stepValidator.isValid()) {\n                status = 1\n            } else if(stepValidator.isValidating()) {\n                status = -1\n            } else {\n                status = 0\n            }\n            \n            if(typeof step.enabled === \"function\" && !step.enabled()) {\n                enabled = true;\n            } else {\n                enabled = false\n            }\n\n            step._state = {\n                active: (this.currentStepIndex === i),\n                status: status,\n                enabled: enabled\n            };\n\n\n\n            \n        }\n        \n    }\n\n    setStep(stepIndex) {\n\n        if(stepIndex < 0 || stepIndex >= this.steps.length) {\n            return;\n        }\n\n        if(this.steps[stepIndex-1]) {\n            this.steps[stepIndex-1].formValidatorInstance.validate()\n        }\n        if(stepIndex === 0 || this.steps[stepIndex-1].formValidatorInstance.isValid()) {\n          \n            for(let i = 0; i < this.steps.length; i++) {\n                let step = this.steps[i];\n                step.formValidatorInstance.$form.classList.add('d-none');\n            }\n            \n            this.steps[stepIndex].formValidatorInstance.$form.classList.remove('d-none');\n            this.currentStepIndex = stepIndex;\n    \n        }   \n\n    }\n\n    next() {\n        this.setStep(this.currentStepIndex + 1);\n    }\n    previous() {\n        this.setStep(this.currentStepIndex - 1);\n    }\n\n    forEachStep(fn, i) {\n        \n    }\n\n\n    start() {\n        this.setStep(0);\n    }\n\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (FormValidatorStepsHandler);\n\n//# sourceURL=webpack:///./src/FormValidatorStepsHandler.js?");

/***/ }),

/***/ "./src/Logger.js":
/*!***********************!*\
  !*** ./src/Logger.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nclass Logger {\n\n    constructor(debug=false) {\n        \n        if(debug) {\n            this.showLogs = true;\n        } else {\n            this.showLogs = false;\n        }\n\n    }\n\n    log(message, _context) {\n        if(!this.showLogs) { return; }\n        let context = _context || \"\";\n        console.log(message, context);\n    }\n    logWarning(message, _context) {\n        if(!this.showLogs) { return; }\n        let context = _context || \"\";\n        console.warn(message, context);\n    }\n    logError(message, _context) {\n        // if(!this.showLogs) { return; }\n        let context = _context || \"\";\n        console.error(message, context);\n    }\n\n\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Logger);\n\n//# sourceURL=webpack:///./src/Logger.js?");

/***/ }),

/***/ "./src/constants.js":
/*!**************************!*\
  !*** ./src/constants.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst INITIALIZED_FIELD_DATA_ATTRIBUTE = 'data-form-validator-initialized-field';\nconst GROUP_WRAPPER_DATA_ATTRIBUTE = 'data-form-validator-group-wrapper';\nconst REPEATABLE_WRAPPER_DATA_ATTRIBUTE = 'data-form-validator-repeatable-wrapper';\nconst REPEATABLE_LIMIT_DATA_ATTRIBUTE = 'data-form-validator-repeatable-limit';\nconst REPEATABLE_ITEM_DATA_ATTRIBUTE = 'data-form-validator-repeatable-item';\n\nconst DEFAULT_OPTIONS = {\n\n    debug: false,\n    enableDataRestore: false, // will be deleted on form submission or reset\n    enableDataRestoreValidation: true, // will also remember validation statuses\n\n    resetFieldValidationOnChange: true,\n    validateFieldOnInput: false,\n    validateFieldOnBlur: true,\n\n    groupWrapperHiddenClass: \"d-none\",\n    groupWrapperVisibleClass: \"d-block\",\n\n    fieldRenderPreferences: {\n        wrapperClass: \"form-group\",\n        wrapperHiddenClass: \"d-none\",\n        wrapperVisibleClass: \"d-block\",\n        \n        // \"Unvalidated\" field state \n        showUnvalidatedMessage: false,\n        unvalidatedMessage: \"Unvalidated\",\n        unvalidatedMessageHTML: \"<div class=\\\"valid-feedback text-muted d-block\\\">{{message}}</div>\",\n        addUnvalidatedClass: true,\n        unvalidatedClass: \"is-unvalidated\",\n        addWrapperUnvalidatedClass: true,\n        wrapperUnvalidatedClass: \"is-unvalidated\",\n\n        // \"Validating\" field state\n        showValidatingMessage: true,\n        validatingMessage: \"Validating...\",\n        validatingMessageHTML: \"<div class=\\\"valid-feedback text-muted d-block\\\">{{message}}</div>\",\n        addValidatingClass: true,\n        validatingClass: \"is-validating\",\n        addWrapperValidatingClass: true,\n        wrapperValidatingClass: \"is-validating\",\n        \n        // \"Invalid\" field state (message will come from first unmatched rule)\n        showInvalidMessage: true,\n        invalidMessageHTML: \"<div class=\\\"invalid-feedback text-danger d-block\\\">{{message}}</div>\",\n        addInvalidClass: true,\n        invalidClass: \"is-invalid\",\n        addWrapperInvalidClass: true,\n        wrapperInvalidClass: \"is-invalid\",\n        \n        // \"Valid\" field state\n        showValidMessage: true,\n        validMessage: \"Field is valid\",\n        validMessageHTML: \"<div class=\\\"valid-feedback text-success d-block\\\">{{message}}</div>\",\n        addValidClass: true,\n        validClass: \"is-valid\",\n        addWrapperValidClass: true,\n        wrapperValidClass: \"is-valid\"\n        \n    },\n    \n    fields: [\n    ],\n\n\n    showLoadingFn: undefined, // returns instance\n    hideLoadingFn: undefined, // returns instance\n    submitFn: undefined, // returns instance\n\n    events: {   \n        onInit: undefined,\n        onBeforeReset: undefined,\n        onReset: undefined,\n        onTrySubmit: undefined,\n        onBeforeSubmit: undefined,\n        onSubmitFail: undefined,\n        onSubmit: undefined,\n        onBeforeValidate: undefined,\n        onValidate: undefined,\n        onBeforeValidateField: undefined,\n        onValidateField: undefined,\n        onFieldInput: undefined,\n        onBeforeShowDependentFields: undefined,\n        onShowDependentFields: undefined,\n        onBeforeHideDependentFields: undefined,\n        onHideDependentFields: undefined\n    }\n\n} \n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    INITIALIZED_FIELD_DATA_ATTRIBUTE,\n    GROUP_WRAPPER_DATA_ATTRIBUTE,\n    DEFAULT_OPTIONS,\n    REPEATABLE_WRAPPER_DATA_ATTRIBUTE,\n    REPEATABLE_LIMIT_DATA_ATTRIBUTE,\n    REPEATABLE_ITEM_DATA_ATTRIBUTE\n});\n\n//# sourceURL=webpack:///./src/constants.js?");

/***/ }),

/***/ "./src/defaultRules.js":
/*!*****************************!*\
  !*** ./src/defaultRules.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _defaultRules_required__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultRules/required */ \"./src/defaultRules/required.js\");\n/* harmony import */ var _defaultRules_length__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultRules/length */ \"./src/defaultRules/length.js\");\n/* harmony import */ var _defaultRules_minLength__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defaultRules/minLength */ \"./src/defaultRules/minLength.js\");\n/* harmony import */ var _defaultRules_maxLength__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultRules/maxLength */ \"./src/defaultRules/maxLength.js\");\n/* harmony import */ var _defaultRules_regex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaultRules/regex */ \"./src/defaultRules/regex.js\");\n/* harmony import */ var _defaultRules_email__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./defaultRules/email */ \"./src/defaultRules/email.js\");\n/* harmony import */ var _defaultRules_equal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./defaultRules/equal */ \"./src/defaultRules/equal.js\");\n/* harmony import */ var _defaultRules_hasValues__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./defaultRules/hasValues */ \"./src/defaultRules/hasValues.js\");\n/* harmony import */ var _defaultRules_cpf__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./defaultRules/cpf */ \"./src/defaultRules/cpf.js\");\n/* harmony import */ var _defaultRules_date__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./defaultRules/date */ \"./src/defaultRules/date.js\");\n/* harmony import */ var _defaultRules_phone__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./defaultRules/phone */ \"./src/defaultRules/phone.js\");\n// imports/collections/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  required: _defaultRules_required__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  minLength: _defaultRules_minLength__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  maxLength: _defaultRules_maxLength__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n  regex: _defaultRules_regex__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n  email: _defaultRules_email__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n  equal: _defaultRules_equal__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n  hasValues: _defaultRules_hasValues__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n  cpf: _defaultRules_cpf__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n  date: _defaultRules_date__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n  phone: _defaultRules_phone__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n  length: _defaultRules_length__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n});\n\n//# sourceURL=webpack:///./src/defaultRules.js?");

/***/ }),

/***/ "./src/defaultRules/cpf.js":
/*!*********************************!*\
  !*** ./src/defaultRules/cpf.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: 'cpf',\n    parameter: null,\n    message: 'CPF inválido',\n    async: false,\n    fn: (value) => {\n\n        function isValidCPF(cpf) {\n            if (typeof cpf !== \"string\") return false\n            cpf = cpf.replace(/[\\s.-]*/igm, '')\n            if (cpf.length !== 11 || !Array.from(cpf).filter(e => e !== cpf[0]).length) {\n                return false\n            }\n            var soma = 0\n            var resto\n            for (var i = 1; i <= 9; i++) \n                soma = soma + parseInt(cpf.substring(i-1, i)) * (11 - i)\n            resto = (soma * 10) % 11\n            if ((resto == 10) || (resto == 11))  resto = 0\n            if (resto != parseInt(cpf.substring(9, 10)) ) return false\n            soma = 0\n            for (var i = 1; i <= 10; i++) \n                soma = soma + parseInt(cpf.substring(i-1, i)) * (12 - i)\n            resto = (soma * 10) % 11\n            if ((resto == 10) || (resto == 11))  resto = 0\n            if (resto != parseInt(cpf.substring(10, 11) ) ) return false\n            return true\n        }\n\n        return isValidCPF(value)\n\n    }\n});\n\n\n//# sourceURL=webpack:///./src/defaultRules/cpf.js?");

/***/ }),

/***/ "./src/defaultRules/date.js":
/*!**********************************!*\
  !*** ./src/defaultRules/date.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: 'date',\n    parameter: null,\n    message: 'Data inválida',\n    async: false,\n    fn: (value, parameter) => {\n        var exp =  /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/;\n        return exp.test(value)\n    }\n});\n\n\n//# sourceURL=webpack:///./src/defaultRules/date.js?");

/***/ }),

/***/ "./src/defaultRules/email.js":
/*!***********************************!*\
  !*** ./src/defaultRules/email.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'email',\n    parameter: null,\n    message: \"Invalid email address\",\n    async: false,\n    fn: (value, parameter) => {\n        var emailRegex = /[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n        return emailRegex.test(value) || !value.length\n    }\n\n});\n\n//# sourceURL=webpack:///./src/defaultRules/email.js?");

/***/ }),

/***/ "./src/defaultRules/equal.js":
/*!***********************************!*\
  !*** ./src/defaultRules/equal.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'equal',\n    parameter: null,\n    message: \"Campo inválido\",\n    async: false,\n    fn: (value, parameter) => {\n        let isEqual = true;\n        if(typeof parameter === \"object\") {\n            parameter.forEach(p => {\n                if(!value.includes(p)) {\n                    isEqual = false;\n                }\n                if(parameter.length !== value.length) {\n                    isEqual = false;\n                }\n            })\n            \n        } else {\n            if(!value.includes(parameter)) {\n                isEqual = false;\n            }\n        }\n\n        return isEqual;\n    }\n\n});\n\n//# sourceURL=webpack:///./src/defaultRules/equal.js?");

/***/ }),

/***/ "./src/defaultRules/hasValues.js":
/*!***************************************!*\
  !*** ./src/defaultRules/hasValues.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'hasValues',\n    parameter: null,\n    message: \"Campo inválido\",\n    async: false,\n    fn: (value, parameter) => {\n        let hasValues = true;\n        if(typeof parameter === \"object\") {\n            if(parameter.length === 0) {\n                hasValues = false;\n            }\n            parameter.forEach(p => {\n                if(!value.includes(p)) {\n                    hasValues = false;\n                }\n            })\n        } else {\n            if(value.includes(parameter)) {\n                hasValues = true;\n            }\n        }\n\n        return hasValues\n    }\n\n});\n\n//# sourceURL=webpack:///./src/defaultRules/hasValues.js?");

/***/ }),

/***/ "./src/defaultRules/length.js":
/*!************************************!*\
  !*** ./src/defaultRules/length.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'length',\n    parameter: null,\n    message: \"Quantidade de itens inválida\",\n    async: false,\n    fn: (value, parameter) => {\n        if(!parameter) {\n            return true\n        }\n        return (value.length === parameter)\n    }\n\n});\n\n//# sourceURL=webpack:///./src/defaultRules/length.js?");

/***/ }),

/***/ "./src/defaultRules/maxLength.js":
/*!***************************************!*\
  !*** ./src/defaultRules/maxLength.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'maxLength',\n    parameter: null,\n    message: \"Valor grande demais\",\n    async: false,\n    fn: (value, parameter) => {\n        if(!parameter) {\n            return true;\n        }\n        return (value.length <= Number(parameter))\n    }\n\n});\n\n//# sourceURL=webpack:///./src/defaultRules/maxLength.js?");

/***/ }),

/***/ "./src/defaultRules/minLength.js":
/*!***************************************!*\
  !*** ./src/defaultRules/minLength.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'minLength',\n    parameter: null,\n    message: \"Valor pequeno demais\",\n    async: false,\n    fn: (value, parameter) => {\n        if(!parameter) {\n            return true;\n        } \n        return (value.length >= parameter)\n    }\n\n});\n\n//# sourceURL=webpack:///./src/defaultRules/minLength.js?");

/***/ }),

/***/ "./src/defaultRules/phone.js":
/*!***********************************!*\
  !*** ./src/defaultRules/phone.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: 'phone',\n    parameter: null,\n    message: 'Telefone inválido',\n    async: false,\n    fn: (value, parameter) => {\n        if(!value.length) {\n            return true\n        } else {\n            var exp =  /^((\\d{3}).(\\d{3}).(\\d{3})-(\\d{2}))*$/;\n            return exp.test(value)\n        }\n        \n    }\n});\n\n\n//# sourceURL=webpack:///./src/defaultRules/phone.js?");

/***/ }),

/***/ "./src/defaultRules/regex.js":
/*!***********************************!*\
  !*** ./src/defaultRules/regex.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: 'regex',\n    parameter: null,\n    message: 'Valor inválido',\n    async: false,\n    fn: (value, parameter) => {\n        if(!parameter) {\n            return true\n        }\n        let allValid = true;\n        var exp =  new RegExp(parameter);\n        value.forEach(value => {\n            if(!exp.test(value)) {\n                allValid = false\n            }\n        })\n        return allValid\n    }\n});\n\n\n//# sourceURL=webpack:///./src/defaultRules/regex.js?");

/***/ }),

/***/ "./src/defaultRules/required.js":
/*!**************************************!*\
  !*** ./src/defaultRules/required.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'required',\n    parameter: null,\n    message: \"Campo obrigatório\",\n    async: false,\n    fn: (value, parameter) => {\n        return (value && value.length > 0)\n    }\n\n});\n\n//# sourceURL=webpack:///./src/defaultRules/required.js?");

/***/ })

/******/ });